# Generated by Django 5.2 on 2025-04-22 20:16

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kinopoisk_id', models.IntegerField(help_text='Unique identifier from Kinopoisk', unique=True, verbose_name='Kinopoisk ID')),
                ('title', models.CharField(help_text='Movie title in Russian', max_length=255, verbose_name='title')),
                ('original_title', models.CharField(blank=True, default='', help_text='Movie title in original language', max_length=255, verbose_name='original title')),
                ('description', models.TextField(blank=True, default='', help_text='Detailed movie description', verbose_name='description')),
                ('year', models.PositiveIntegerField(blank=True, help_text='Release year', null=True, validators=[django.core.validators.MinValueValidator(1888), django.core.validators.MaxValueValidator(2100)], verbose_name='year')),
                ('rating', models.FloatField(blank=True, help_text='Rating from 0 to 10', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='rating')),
                ('poster_url', models.URLField(blank=True, default='', help_text='URL to movie poster image', max_length=500, verbose_name='poster URL')),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Duration in minutes', null=True, verbose_name='duration')),
                ('countries', models.JSONField(default=list, help_text='List of production countries', verbose_name='countries')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date when movie was added to database', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date when movie was last updated', verbose_name='updated at')),
                ('genres', models.ManyToManyField(help_text='Movie genres', related_name='movies', to='movies.genre', verbose_name='genres')),
            ],
            options={
                'verbose_name': 'movie',
                'verbose_name_plural': 'movies',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True, help_text='Date when movie was added to favorites', verbose_name='added at')),
                ('user', models.ForeignKey(help_text='User who added the movie to favorites', on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('movie', models.ForeignKey(help_text='Favorite movie', on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='movies.movie', verbose_name='movie')),
            ],
            options={
                'verbose_name': 'favorite',
                'verbose_name_plural': 'favorites',
                'ordering': ['-added_at'],
            },
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['rating'], name='movie_rating_idx'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['year'], name='movie_year_idx'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['title'], name='movie_title_idx'),
        ),
        migrations.AddIndex(
            model_name='favorite',
            index=models.Index(fields=['user', 'added_at'], name='favorite_user_added_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='favorite',
            unique_together={('user', 'movie')},
        ),
    ]
